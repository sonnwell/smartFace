{"ast":null,"code":"var _jsxFileName = \"/Users/sonniewelling/face/my-app/src/App.js\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiRequestOptions = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentication\n  const PAT = \"c998e70a93f04ff291469ab00f1df1ad\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"5hdnsuctgr7b\";\n  const APP_ID = \"test\";\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID\n    },\n    inputs: [{\n      data: {\n        image: {\n          url: IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n    this.onSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      console.log(this.state.imageUrl);\n      fetch(\"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\", returnClarifaiRequestOptions(this.state.imageUrl)).then(response => response.json()).then(result => console.log(result.outputs[0].data.regions[0].region_info.bounding_box)).catch(error => console.log(\"error\", error));\n    };\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {}\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App text-center\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        submit: this.onSubmit,\n        onInputChange: this.onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","ImageLinkForm","Rank","FaceRecognition","jsxDEV","_jsxDEV","returnClarifaiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","App","constructor","onInputChange","e","setState","input","target","value","onSubmit","state","console","log","fetch","then","response","json","result","outputs","regions","region_info","bounding_box","catch","error","box","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","submit"],"sources":["/Users/sonniewelling/face/my-app/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\n\nconst returnClarifaiRequestOptions = (imageUrl) => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentication\n  const PAT = \"c998e70a93f04ff291469ab00f1df1ad\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"5hdnsuctgr7b\";\n  const APP_ID = \"test\";\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = imageUrl;\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    inputs: [\n      {\n        data: {\n          image: {\n            url: IMAGE_URL,\n          },\n        },\n      },\n    ],\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT,\n    },\n    body: raw,\n  };\n  return requestOptions;\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {},\n    };\n  }\n  onInputChange = (e) => {\n    this.setState({ input: e.target.value });\n  };\n\n  onSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    console.log(this.state.imageUrl);\n    fetch(\n      \"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\",\n      returnClarifaiRequestOptions(this.state.imageUrl)\n    )\n      .then((response) => response.json())\n      .then((result) =>\n        console.log(result.outputs[0].data.regions[0].region_info.bounding_box)\n      )\n      .catch((error) => console.log(\"error\", error));\n  };\n  render() {\n    return (\n      <div className=\"App text-center\">\n        <Navigation />\n        <Rank />\n        <ImageLinkForm\n          submit={this.onSubmit}\n          onInputChange={this.onInputChange}\n        />\n        <FaceRecognition imageUrl={this.state.imageUrl} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}