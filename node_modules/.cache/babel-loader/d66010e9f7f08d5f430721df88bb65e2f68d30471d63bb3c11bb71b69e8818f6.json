{"ast":null,"code":"var _jsxFileName = \"/Users/sonniewelling/face/my-app/src/App.js\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiRequestOptions = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentication\n  const PAT = \"c998e70a93f04ff291469ab00f1df1ad\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"5hdnsuctgr7b\";\n  const APP_ID = \"test\";\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID\n    },\n    inputs: [{\n      data: {\n        image: {\n          url: IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputImage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      console.log(width, height);\n    };\n    this.onInputChange = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n    this.onSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      console.log(this.state.imageUrl);\n      fetch(\"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\", returnClarifaiRequestOptions(this.state.imageUrl)).then(response => response.json()).then(result => this.calculateFaceLocation(result)).catch(error => console.log(\"error\", error));\n    };\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {}\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App text-center\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        submit: this.onSubmit,\n        onInputChange: this.onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","ImageLinkForm","Rank","FaceRecognition","jsxDEV","_jsxDEV","returnClarifaiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","App","constructor","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","document","getElementById","width","Number","height","console","log","onInputChange","e","setState","input","target","value","onSubmit","state","fetch","then","response","json","result","catch","error","box","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","submit"],"sources":["/Users/sonniewelling/face/my-app/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\n\nconst returnClarifaiRequestOptions = (imageUrl) => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentication\n  const PAT = \"c998e70a93f04ff291469ab00f1df1ad\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"5hdnsuctgr7b\";\n  const APP_ID = \"test\";\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = imageUrl;\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    inputs: [\n      {\n        data: {\n          image: {\n            url: IMAGE_URL,\n          },\n        },\n      },\n    ],\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT,\n    },\n    body: raw,\n  };\n  return requestOptions;\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {\n\n      },\n    };\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    console.log(width, height)\n  }\n\n  onInputChange = (e) => {\n    this.setState({ input: e.target.value });\n  };\n\n  onSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    console.log(this.state.imageUrl);\n    fetch(\n      \"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\",\n      returnClarifaiRequestOptions(this.state.imageUrl)\n    )\n      .then((response) => response.json())\n      .then((result) =>\n        this.calculateFaceLocation(result)\n      )\n      .catch((error) => console.log(\"error\", error));\n  };\n  render() {\n    return (\n      <div className=\"App text-center\">\n        <Navigation />\n        <Rank />\n        <ImageLinkForm\n          submit={this.onSubmit}\n          onInputChange={this.onInputChange}\n        />\n        <FaceRecognition imageUrl={this.state.imageUrl} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,eAAe,MAAM,8CAA8C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,MAAMC,4BAA4B,GAAIC,QAAQ,IAAK;EACjD;EACA,MAAMC,GAAG,GAAG,kCAAkC;EAC9C;EACA;EACA,MAAMC,OAAO,GAAG,cAAc;EAC9B,MAAMC,MAAM,GAAG,MAAM;EACrB;EACA,MAAMC,SAAS,GAAGJ,QAAQ;EAE1B,MAAMK,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;IACzBC,WAAW,EAAE;MACXC,OAAO,EAAEP,OAAO;MAChBQ,MAAM,EAAEP;IACV,CAAC;IACDQ,MAAM,EAAE,CACN;MACEC,IAAI,EAAE;QACJC,KAAK,EAAE;UACLC,GAAG,EAAEV;QACP;MACF;IACF,CAAC;EAEL,CAAC,CAAC;EAEF,MAAMW,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1BC,aAAa,EAAE,MAAM,GAAGlB;IAC1B,CAAC;IACDmB,IAAI,EAAEf;EACR,CAAC;EACD,OAAOU,cAAc;AACvB,CAAC;;AAED;AACA;AACA;;AAEA,MAAMM,GAAG,SAAS7B,SAAS,CAAC;EAC1B8B,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAC,KAUVC,qBAAqB,GAAIX,IAAI,IAAK;MAChC,MAAMY,YAAY,GAAGZ,IAAI,CAACa,OAAO,CAAC,CAAC,CAAC,CAACb,IAAI,CAACc,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW,CAACC,YAAY;MAC7E,MAAMf,KAAK,GAAGgB,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;MACnD,MAAMC,KAAK,GAAGC,MAAM,CAACnB,KAAK,CAACkB,KAAK,CAAC;MACjC,MAAME,MAAM,GAAGD,MAAM,CAACnB,KAAK,CAACoB,MAAM,CAAC;MACnCC,OAAO,CAACC,GAAG,CAACJ,KAAK,EAAEE,MAAM,CAAC;IAC5B,CAAC;IAAA,KAEDG,aAAa,GAAIC,CAAC,IAAK;MACrB,IAAI,CAACC,QAAQ,CAAC;QAAEC,KAAK,EAAEF,CAAC,CAACG,MAAM,CAACC;MAAM,CAAC,CAAC;IAC1C,CAAC;IAAA,KAEDC,QAAQ,GAAG,MAAM;MACf,IAAI,CAACJ,QAAQ,CAAC;QAAEtC,QAAQ,EAAE,IAAI,CAAC2C,KAAK,CAACJ;MAAM,CAAC,CAAC;MAC7CL,OAAO,CAACC,GAAG,CAAC,IAAI,CAACQ,KAAK,CAAC3C,QAAQ,CAAC;MAChC4C,KAAK,CACH,qCAAqC,GAAG,gBAAgB,GAAG,UAAU,EACrE7C,4BAA4B,CAAC,IAAI,CAAC4C,KAAK,CAAC3C,QAAQ,CAClD,CAAC,CACE6C,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,MAAM,IACX,IAAI,CAACzB,qBAAqB,CAACyB,MAAM,CACnC,CAAC,CACAC,KAAK,CAAEC,KAAK,IAAKhB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEe,KAAK,CAAC,CAAC;IAClD,CAAC;IAjCC,IAAI,CAACP,KAAK,GAAG;MACXJ,KAAK,EAAE,EAAE;MACTvC,QAAQ,EAAE,EAAE;MACZmD,GAAG,EAAE,CAEL;IACF,CAAC;EACH;EA2BAC,MAAMA,CAAA,EAAG;IACP,oBACEtD,OAAA;MAAKuD,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BxD,OAAA,CAACL,UAAU;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACd5D,OAAA,CAACH,IAAI;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACR5D,OAAA,CAACJ,aAAa;QACZiE,MAAM,EAAE,IAAI,CAACjB,QAAS;QACtBN,aAAa,EAAE,IAAI,CAACA;MAAc;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACF5D,OAAA,CAACF,eAAe;QAACI,QAAQ,EAAE,IAAI,CAAC2C,KAAK,CAAC3C;MAAS;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC;EAEV;AACF;AAEA,eAAerC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}