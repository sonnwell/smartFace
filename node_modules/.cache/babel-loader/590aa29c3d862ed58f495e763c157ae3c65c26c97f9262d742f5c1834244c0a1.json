{"ast":null,"code":"var _jsxFileName = \"/Users/sonniewelling/face/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [box, setBox] = useState({});\n  const requestJSON = imageUrl => {\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \"ce7067f3d55a4e6d8fa87f4206545d5b\";\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = \"5hdnsuctgr7b\";\n    const APP_ID = \"my-first-application-fugwn\";\n    // Change these to whatever model and image URL you want to use\n    const IMAGE_URL = \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/Tom_Brady_2021.png/640px-Tom_Brady_2021.png\";\n    const raw = JSON.stringify({\n      user_app_id: {\n        user_id: USER_ID,\n        app_id: APP_ID\n      },\n      inputs: [{\n        data: {\n          image: {\n            url: IMAGE_URL\n          }\n        }\n      }]\n    });\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: \"Key \" + PAT\n      },\n      body: raw\n    };\n  };\n  const onInputChange = e => {\n    setInput(e.target.value);\n  };\n  async function onSubmit() {\n    try {\n      const response = await fetch(\"https://api.clarifai.com/v2/models/face-detection/outputs\"\n      // requestOptions\n      );\n\n      const result = await console.log(response);\n      console.log(result);\n      setImageUrl(input);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n  const calculateFaceLocation = data => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App text-center\",\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n      submit: onSubmit,\n      onInputChange: onInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n      imageUrl: imageUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"NbVF/qyMJ7AtxjTLqey+8+u7GW0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Navigation","ImageLinkForm","Rank","FaceRecognition","jsxDEV","_jsxDEV","App","_s","input","setInput","imageUrl","setImageUrl","box","setBox","requestJSON","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","onInputChange","e","target","value","onSubmit","response","fetch","result","console","log","error","calculateFaceLocation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","submit","_c","$RefreshReg$"],"sources":["/Users/sonniewelling/face/my-app/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\n\nconst App = () => {\n  const [input, setInput] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [box, setBox] = useState({});\n\n\n  const requestJSON = (imageUrl) => {\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = \"ce7067f3d55a4e6d8fa87f4206545d5b\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"5hdnsuctgr7b\";\n  const APP_ID = \"my-first-application-fugwn\";\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/Tom_Brady_2021.png/640px-Tom_Brady_2021.png\";\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    inputs: [\n      {\n        data: {\n          image: {\n            url: IMAGE_URL,\n          },\n        },\n      },\n    ],\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT,\n    },\n    body: raw,\n  };\n\n  }\n\n  const onInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  async function onSubmit() {\n    try {\n      const response = await fetch(\n        \"https://api.clarifai.com/v2/models/face-detection/outputs\",\n        // requestOptions\n      );\n      const result = await console.log(response);\n      console.log(result);\n      setImageUrl(input);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  const calculateFaceLocation = (data) => {\n\n  };\n\n  return (\n    <div className=\"App text-center\">\n      <Navigation />\n      <Rank />\n      <ImageLinkForm submit={onSubmit} onInputChange={onInputChange} />\n      <FaceRecognition imageUrl={imageUrl} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}